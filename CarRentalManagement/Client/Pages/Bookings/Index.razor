@page "/bookings/"
@inject HttpClient _client
@inject IJSRuntime _js
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<h3 class="card-title">Car Bookings</h3>
<hr />
<br />

<a href="/bookings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Booking
</a>
<br />
@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings...</div>
}
else
{
    <table class="table table">
        <thead>
            <tr>
                <th>Customer Tax ID</th>
                <th>Date</th>
                <th>Duration</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in Bookings)
            {
                <tr>
                    <td>@booking.Customer.TaxId</td>
                    <td>@booking.DateCreated.Date.ToString("dd MMMM yyyy")</td>
                    <td>@((booking.DateIn - booking.DateOut).TotalDays.ToString("dd MMMM yyyy"))</td>
                    <td>
                        <a href="/bookings/view/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/bookings/edit/@booking.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(booking.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Booking> Bookings;

    protected async override Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
    }

    async Task Delete(int id)
    {
        var booking = Bookings.First(q => q.Id == id);
        var confirm = await _js.InvokeAsync<bool>("confirm", $"Do you want to delete this booking?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}{id}");
            await OnInitializedAsync();
        }
    }
}
